#! /usr/bin/env python
"""
Worker program for zounds: run this on remote systems to retrieve
sequences to BLAST from the zounds-central server, to which results
will then be returned.
"""

import sys
import xmlrpclib
from subprocess import Popen, PIPE
from cPickle import dumps
from optparse import OptionParser
import socket

import blastparser

DEFAULT_SERVER='http://iorich.caltech.edu:5679'
VERBOSE=False
DEBUG=False

###

def do_blast(program, against_db, extra_args, name, seq):
    """
    Actually do the BLAST and return results.
    """
    seqs = ">%s\n%s\n" % (name, seq,)

    cmd = [ "blastall", "-d", against_db, "-p", program, extra_args ]
    
    if DEBUG:
        sys.stdout.write(seqs)
        print '** running:', cmd

    p = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE)
    (out, err) = p.communicate(seqs)

    return out, err

def parse_blast(out):
    """
    Parse the BLAST output into an object.
    """
    records = blastparser.parse_string(out, ignore_errors=True)
    records = list(records)
    return records

def handle_sequences(program, against_db, extra_args, seqs):
    """
    Run through the given sequences, doing BLASTs and returning
    results via yield.
    """
    z = []
    for n, (name, seq) in enumerate(seqs):
        if VERBOSE:
            print 'starting BLAST %d of %d...' % (n + 1, len(seqs))
            
        out, err = do_blast(program, against_db, extra_args, name, seq)

        if DEBUG:
            sys.stdout.write(out)
            sys.stderr.write(err)

        if VERBOSE:
            print '   ... finished.'

        records = parse_blast(out)

        # error?
        if len(records) == 0:
            print '--\n** sequence: %s\n%s' % (name, out)
            print >>sys.stderr, '--\n** sequence: %s\n%s' % (name, err)
            record = ()
        else:
            assert len(records) == 1
            record = records[0]

        yield name, record

def main(server_url):
    """
    Contact the given zounds-central server via XML-RPC; get parameters;
    import filter function, if any; and loop until done, returning
    intermediate results as specified.
    """
    
    s = xmlrpclib.Server(server_url)

    try:
        (chunksize, n_chunks, dump_frequency, filter) = s.get_parameters()
    except socket.error:
        print >>sys.stderr, "cannot connect to server; exiting"
        sys.exit(-1)

    if filter:
        module_name, filter_fn = filter.split('.')
        exec "import %s" % (module_name,)
        filter = getattr(globals()[module_name], filter_fn)

    results = []
    for i in range(n_chunks):
        if VERBOSE:
            print 'asking for %d sequences' % (chunksize,)
            
        x = s.retrieve_sequences(chunksize)
        if not x:
            if VERBOSE: print 'no more sequences; exiting'
            break                       # done.

        #
        # unpack arguments, do blasts.
        #
        
        program, against_db, extra_args, seqs = x
        for name, record in handle_sequences(program, against_db,
                                             extra_args, seqs):

            if filter:
                record = filter(record)
            
            pickle = dumps(record)
            results.append((name, xmlrpclib.Binary(pickle)))

            if len(results) >= dump_frequency:
                if VERBOSE:
                    print 'dumping %d results' % (len(results),)
                s.deposit_results(results)
                results = []

    if results:
        if VERBOSE:
            print 'dumping %d results' % (len(results),)
        s.deposit_results(results)

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-v", "--verbose", dest="verbose", default=False,
                      action="store_true",
                      help="Print verbose status messages")
    parser.add_option("-d", "--debug", dest="debug", default=False,
                      action="store_true",
                      help="Print BLAST output")
    
    (options, args) = parser.parse_args()

    if options.verbose:
        VERBOSE = True
    if options.debug:
        DEBUG = True
    
    server_url = DEFAULT_SERVER
    if len(args) == 1:
        server_url = args[0]
        print 'Using alternate zounds server:', server_url

    main(server_url)
