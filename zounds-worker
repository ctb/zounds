#! /usr/bin/env python
"""
Worker program for zounds: run this on remote systems to retrieve
sequences to process from the zounds-central server, to which results
will then be returned.
"""

import sys
import xmlrpclib
from subprocess import Popen, PIPE
from cPickle import dumps
from optparse import OptionParser
import socket
import signal

DEFAULT_SERVER='http://lyorn.idyll.org:5679'
VERBOSE=False
DEBUG=False

class TimeoutSignal(Exception):
    pass

###

def do_blast(program, against_db, extra_args, name, seq):
    """
    Actually do the BLAST and return results.
    """
    seqs = ">%s\n%s\n" % (name, seq,)

    cmd = [ "blastall", "-d", against_db, "-p", program, extra_args ]
    
    if DEBUG:
        sys.stdout.write(seqs)
        print '** running:', cmd

    p = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE)
    (out, err) = p.communicate(seqs)

    assert p.returncode == 0, "return code err: %s, %s, %s" % \
           (p.returncode, out, err)

    return out, err

def blast_sequences(program, against_db, extra_args, seqs):
    """
    Run through the given sequences, doing BLASTs and returning results.
    """
    z = []
    for n, (name, seq) in enumerate(seqs):
        if VERBOSE:
            print 'starting BLAST %d of %d...' % (n + 1, len(seqs))
            
        out, err = do_blast(program, against_db, extra_args, name, seq)

        if DEBUG:
            sys.stdout.write(out)
            sys.stderr.write(err)

        if VERBOSE:
            print '   ... finished.'

        yield name, (out, err)

def do_hmmscan(against_db, extra_args, name, seq):
    """
    Actually do the hmmscan and return results.
    """
    seqs = ">%s\n%s\n" % (name, seq,)

    cmd = [ "hmmscan", extra_args, against_db, '-' ] # take seqs from stdin
    
    if DEBUG:
        sys.stdout.write(seqs)
        print '** running:', cmd

    p = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE)
    (out, err) = p.communicate(seqs)

    assert p.returncode == 0, "return code err: %s, %s, %s" % \
           (p.returncode, out, err)

    return out, err

def hmmscan_sequences(against_db, extra_args, seqs):
    """
    Run through the given sequences, doing hmmscan and returning results.
    """
    z = []
    for n, (name, seq) in enumerate(seqs):
        if VERBOSE:
            print 'starting hmmscan %d of %d...' % (n + 1, len(seqs))
            
        out, err = do_hmmscan(against_db, extra_args, name, seq)

        if DEBUG:
            sys.stdout.write(out)
            sys.stderr.write(err)

        if VERBOSE:
            print '   ... finished.'

        yield name, (out, err)
    

def do_cmd(cmdtype, params):
    if cmdtype == 'blast':
        program, against_db, extra_args, seqs = params
        for name, record in blast_sequences(program, against_db,
                                             extra_args, seqs):
            yield name, record
    elif cmdtype == 'hmmer3':
        hmmscan_db, extra_args, seqs = params
        for name, record in hmmscan_sequences(hmmscan_db, extra_args, seqs):
            yield name, record
    else:
        assert 0, "unsupported: %s" % cmdtype

def timeout_handler(signum, frame):
    raise TimeoutSignal

def main(server_url, timeout=None):
    """
    Contact the given zounds-central server via XML-RPC; get parameters;
    import filter function, if any; and loop until done, returning
    intermediate results as specified.  'timeout', if given, is in
    minutes.
    """

    if timeout:
        # Set the signal handler and the timeout
        signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(timeout*60)

    total_processed = 0
    filter_fn = None
    
    s = xmlrpclib.Server(server_url)

    try:
        (cmdtype, chunksize, n_chunks, dump_frequency, filter_name) = \
                  s.get_parameters()
    except socket.error:
        print >>sys.stderr, "cannot connect to server; exiting"
        sys.exit(-1)

    if filter_name:
        module_name, fn_name = filter_name.split('.')
        exec "import %s" % (module_name,)
        filter_fn = getattr(locals()[module_name], fn_name)


    #
    # main loop; when we exit from here, we're done.
    #
    
    results = []
    for i in range(n_chunks):
        try:
            if VERBOSE:
                print 'asking for %d sequences' % (chunksize,)

            x = s.retrieve_sequences(chunksize)
            if not x:
                if VERBOSE: print 'no more sequences; exiting'
                break                       # done.

            for name, record in do_cmd(cmdtype, x):
                total_processed += 1
                if filter_fn:
                    record = filter_fn(record)

                pickle = dumps(record)
                results.append((name, xmlrpclib.Binary(pickle)))

                # is it time to return results?
                if len(results) >= dump_frequency:
                    if VERBOSE:
                        print 'dumping %d results' % (len(results),)
                    s.deposit_results(results)
                    results = []
        except TimeoutSignal:
            print 'TIMEOUT alarm received; exiting.'
            signal.alarm(0)             # disable further timeouts
            break

    # flush remaining results
    if results:
        if VERBOSE:
            print 'dumping %d results' % (len(results),)
        s.deposit_results(results)

    # done!
    return total_processed

##

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option("-v", "--verbose", dest="verbose", default=False,
                      action="store_true",
                      help="Print verbose status messages")
    parser.add_option("-d", "--debug", dest="debug", default=False,
                      action="store_true",
                      help="Print debuggin output")
    parser.add_option("-t", "--timeout", dest="timeout", default=None,
                      action="store", type="int",
                      help="timeout, in minutes")
    
    (options, args) = parser.parse_args()

    if options.verbose:
        VERBOSE = True
    if options.debug:
        DEBUG = True
    
    server_url = DEFAULT_SERVER
    if len(args) == 1:
        server_url = args[0]
        print 'Using alternate zounds server:', server_url

    total_processed = main(server_url, timeout=options.timeout)
    print 'exiting; total records processed:', total_processed
