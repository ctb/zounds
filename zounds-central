#! /usr/bin/env python
import sys
import threading
from bsddb import btopen
from pygr.seqdb import BlastDB
from SimpleXMLRPCServer import SimpleXMLRPCServer
from SocketServer import ThreadingMixIn
from cPickle import loads
import time
from ConfigParser import SafeConfigParser

host = None
port = None
done = False

class ZoundsCentral(object):
    def __init__(self, config_obj, section_name):
        """
        Initialize: load config & databases, calculate initial workload.
        """
        self._initialize(config_obj, section_name)
        self.section_name = section_name

        print 'opening sequences:', self.fasta_file
        self.sequences = BlastDB(self.fasta_file)

        print 'opening database:', self.db_file
        self.db = btopen(self.db_file, 'c')

        self._undone = set()
        self._dbcache = dict()

        self.retrieve_lock = threading.Lock()

        print 'calculating undone seqs...',
        self._calc_undone()
        print '%d undone' % (len(self._undone),)

    def _initialize(self, config_obj, section_name):
        "Load parameters from the config obj and attach them to 'self'."

        self.cmdtype = config_obj.get(section_name, 'cmdtype')
        self.chunksize = config_obj.getint(section_name, 'chunksize')
        self.n_chunks = config_obj.getint(section_name, 'n_chunks')
        self.dump_frequency = config_obj.getint(section_name, 'dump_frequency')
        self.fasta_file = config_obj.get(section_name, 'sequences')
        self.db_file = config_obj.get(section_name, 'store_db')

        if self.cmdtype == 'blast':
            self.against_db_name = config_obj.get(section_name, 'blastdb')
            self.blast_program = config_obj.get(section_name, 'program')
            self.extra_blast_args = config_obj.get(section_name,
                                                   'blast_options')
        elif self.cmdtype == 'hmmer3':
            self.against_db_name = config_obj.get(section_name, 'hmmscandb')
            self.extra_hmmscan_args = config_obj.get(section_name,
                                                    'hmmscan_options')
        
        self.filter = config_obj.get(section_name, 'filter')

    def _calc_undone(self):
        "Calculate how many sequences do NOT have records attached."
        db_keys = set(self.db.keys())
        fasta_keys = set([k for k in self.sequences ])
        self._undone = fasta_keys.difference(db_keys)

        self._undone_initial_count = len(self._undone)
        self._undone_current_count = self._undone_initial_count

    def save_cache_to_disk(self):
        """
        Flush the in-memory cache of results to disk.
        
        Since bsddb does not seem to be threadsafe for writes, this
        should never be called from more than one thread.
        """
        keys = self._dbcache.keys()
        if not keys:
            return                      # nothing to save

        # Run through and save each cached result into the database.
        
        db = self.db
        _dbcache = self._dbcache

        for k in keys:                  # could we just use an update here?
            db[k] = _dbcache[k]
            del _dbcache[k]
        db.sync()

        self._undone_current_count -= len(keys)
        print 'saved %d from cache to disk, leaving %d' % (len(keys),
                                                  self._undone_current_count)

    ### XML-RPC accessible functions

    def estimate_undone(self):
        "XML-RPC function: return how many sequences remain."
        return self._undone_current_count

    def get_parameters(self):
        "XML-RPC function: get basic cmd parameters"
        
        return (self.cmdtype, self.chunksize, self.n_chunks,
                self.dump_frequency, self.filter)


    def retrieve_sequences(self, chunksize):
        "XML-RPC function: retrieve sequences for work."
        _undone = self._undone
        if not _undone:
            return ()

        # lock, so that multiple threads don't get the same set of sequences.
        # there may be a nicer way of doing this.
        self.retrieve_lock.acquire()

        try:
            i = iter(_undone)
            z = []
            for k in range(chunksize):
                try:
                    z.append(i.next())
                except StopIteration:
                    break

            print 'returning %d sequences' % (len(z),)

            seqs = [ (k, str(self.sequences[k])) for k in z ]
            _undone.difference_update(z)

            print '...%d undone' % (len(_undone))

            cmdtype = self.cmdtype
            if cmdtype == 'blast':
                return (self.blast_program,
                        self.against_db_name,
                        self.extra_blast_args,
                        seqs)
            elif cmdtype == 'hmmer3':
                return (self.against_db_name, self.extra_hmmscan_args, seqs)
        finally:
            self.retrieve_lock.release()

    def deposit_results(self, results):
        "XML-RPC function: save results from the client into the cache."
        for (key, binary_obj) in results:
            self._dbcache[key] = binary_obj.data

        print 'deposited %d' % (len(results),)

        return 0

###

def load_config(filename, section_name):
    "Load in the configuration"
    
    fp = open(filename)
    
    config_obj = SafeConfigParser()
    config_obj.readfp(fp)

    return config_obj

class ThreadedServer(ThreadingMixIn, SimpleXMLRPCServer):
    "Simple threaded XML-RPC server."

def create_server(host, port, obj):
    "Create an XML-RPC server & register functions."
    server = ThreadedServer((host, port))
    server.register_function(obj.get_parameters, 'get_parameters')
    server.register_function(obj.retrieve_sequences, 'retrieve_sequences')
    server.register_function(obj.deposit_results, 'deposit_results')
    server.register_function(obj.estimate_undone, 'estimate_undone')

    return server

def cache_saver(obj, delay=1):
    "Threaded function to periodically save results cache to disk."
    while not done:
        obj.save_cache_to_disk()
        time.sleep(delay)

####

def main(config_obj, section_name, host, port):
    global done

    # create the object to manage the sequences stuff
    central = ZoundsCentral(config_obj, section_name)

    # start the thread to save objects to disk
    saver_thread = threading.Thread(target=cache_saver, args=(central,))
    saver_thread.start()

    # start the XML-RPC server
    server = create_server(host, port, central)
    try:
        try:
            print 'serving %s on port %s...' % (section_name, port)
            server.serve_forever()
        except KeyboardInterrupt:
            done = True
    finally:
        print 'waiting for saver thread to finish...'
        saver_thread.join()
        central.save_cache_to_disk()
        central.db.close()

if __name__ == '__main__':
    config_file, section_name = sys.argv[1], sys.argv[2]
    config_obj = load_config(config_file, section_name)

    host = config_obj.get(section_name, 'host')
    port = config_obj.getint(section_name, 'port')

    main(config_obj, section_name, host, port)
